version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-container
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbit-container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_net
  redis:
    image: redis:7-alpine
    container_name: redis-container
    volumes:
      - redis_data:/var/lib/redis/data
    command: >
      redis-server
      --requirepass ${REDIS_PASS}
      --bind 0.0.0.0
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASS}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

  fastapi:
    build:
      context: ../backend
    container_name: fastapi-container
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - 8000
    networks:
      - nginx_net
      - backend_net
  aiobot:
    build:
      context: ../bot
    container_name: aiobot-container
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_net
    restart: always
  celery:
    build:
      context: ../backend
    container_name: celery-container
    command: celery -A app.core.celery_config worker --loglevel=info
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend_net
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    container_name: nginx-container
    ports:
      - "80:80"
    depends_on:
      - fastapi
    networks:
      - nginx_net
      - backend_net
    restart: always


networks:
  nginx_net:
    driver: bridge
  backend_net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
