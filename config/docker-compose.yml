version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres-container
    env_file:
      - /root/fastapi/.env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    deploy:
      resources:
        limits:
          memory: 150m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "+K true +A 128"
    mem_limit: 768m
    cpus: 0.5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    command: >
      sh -c "
      chown -R rabbitmq:rabbitmq /var/lib/rabbitmq 2>/dev/null || true &&
      chmod 600 /var/lib/rabbitmq/.erlang.cookie 2>/dev/null || true &&
      echo 'vm_memory_high_watermark.relative = 0.4' > /etc/rabbitmq/rabbitmq.conf &&
      echo 'vm_memory_high_watermark_paging_ratio = 0.5' >> /etc/rabbitmq/rabbitmq.conf &&
      echo 'disk_free_limit.absolute = 500MB' >> /etc/rabbitmq/rabbitmq.conf &&
      exec docker-entrypoint.sh rabbitmq-server
      "
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - backend_net

  redis:
    image: redis:7-alpine
    container_name: redis-container
    volumes:
      - redis_data:/var/lib/redis/data
    command: >
      redis-server
      --requirepass ${REDIS_PASS}
      --bind 0.0.0.0
      --maxmemory 80mb
      --maxmemory-policy allkeys-lru
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    deploy:
      resources:
        limits:
          memory: 100m
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASS}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

  fastapi:
    image: asdfrewqha/calendar:latest
    container_name: fastapi-container
    env_file:
      - /root/fastapi/.env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    expose:
      - 8000
    networks:
      - nginx_net
      - backend_net

  celery:
    image: asdfrewqha/calendar:latest
    container_name: celery-container
    env_file:
      - /root/fastapi/.env
    command: aio_celery -A app.core.celery_config:app worker --loglevel=info -P solo
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_net

  aiobot:
    image: asdfrewqha/calendar_bot:latest
    container_name: aiobot-container
    env_file:
      - /root/fastapi/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend_net
    restart: always

  nginx:
    image: nginx:alpine
    container_name: nginx-container
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /root/fastapi/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - fastapi
    restart: unless-stopped
    networks:
      - nginx_net
      - backend_net

networks:
  nginx_net:
    driver: bridge
  backend_net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
