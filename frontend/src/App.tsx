import { useEffect, useState } from 'react';
import './App.css';

interface TelegramUser {
  id: number;
  first_name: string;
  last_name: string;
  username: string;
  language_code: string;
  is_premium: boolean;
  added_to_attachment_menu: boolean;
  allows_write_to_pm: boolean;
  photo_url: string;
}

interface ApiResponse {
  status: string;
  message?: string;
}

declare global {
  interface Window {
    Telegram: {
      WebApp: {
        ready: () => void;
        initDataUnsafe: {
          user: TelegramUser;
        };
        initData: string;
      };
    };
  }
}

export default function App() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [debugInfo, setDebugInfo] = useState<string>('');

  useEffect(() => {
    const authenticate = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Telegram WebApp
      if (!window.Telegram?.WebApp) {
        setError('Telegram Web App –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        setLoading(false);
        setDebugInfo('–û–±—ä–µ–∫—Ç Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.');
        return;
      }

      const tg = window.Telegram.WebApp;
      tg.ready();

      const formData = new URLSearchParams();
      formData.append('initData', tg.initData);

      try {
        const response = await fetch('https://api.asdfrewqha.ru/api/get-token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: formData,
          credentials: 'include'
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const responseText = await response.text();
        setDebugInfo(`Status: ${response.status}, Response: ${responseText}`);

        let data: ApiResponse;
        try {
          data = JSON.parse(responseText);
        } catch (e) {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç: ${responseText}`);
        }

        console.log('Response data:', data);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ status –≤–º–µ—Å—Ç–æ ok
        if (response.ok && data.status === "success") {
          setSuccess(true);
          setTimeout(() => {
            window.location.href = '/#/main';
          }, 2000);
        } else {
          setError(data.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (err) {
        console.error('Fetch error:', err);
        setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã: ${err instanceof Error ? err.message : 'Unknown error'}`);
      } finally {
        setLoading(false);
      }
    };

    authenticate();
  }, []);

  const openInTelegram = () => {
    const telegramUrl = `https://t.me/your_bot_username/startapp?startapp=webapp`;
    window.open(telegramUrl, '_blank');
  };

  if (loading) {
    return (
      <div className="app">
        <div className="loading-container">
          <div className="spinner"></div>
          <p>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app">
        <header className="app-header">
          <h1>Telegram Web App</h1>
          <p>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</p>
        </header>
        <main className="app-main">
          <div className="error-container">
            <div className="error-icon">‚ö†Ô∏è</div>
            <h3>–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</h3>
            <p>{error}</p>

            {/* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é */}
            {debugInfo && (
              <details className="debug-info">
                <summary>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)</summary>
                <pre>{debugInfo}</pre>
              </details>
            )}

            <div className="button-group">
              <button onClick={openInTelegram} className="telegram-btn">
                üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
              </button>
              <button
                onClick={() => window.location.reload()}
                className="retry-btn"
              >
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  if (success) {
    return (
      <div className="app">
        <header className="app-header">
          <h1>Telegram Web App</h1>
          <p>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</p>
        </header>
        <main className="app-main">
          <div className="success-container">
            <div className="success-icon">‚úÖ</div>
            <h3>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h3>
            <p>–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.</p>
            <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...</p>
            <div className="loading-spinner-small"></div>
          </div>
        </main>
      </div>
    );
  }

  return null;
}
